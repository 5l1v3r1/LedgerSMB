BEGIN;

    -- Load the TAP functions.
    CREATE EXTENSION pgtap;

    -- Plan the tests.

    SELECT plan(55);

    -- Add data

    \i sql/modules/test/Base.sql
    \i sql/modules/test/data/Reconciliation.sql

    -- Validate required tables

    SELECT has_table('cr_report');
    SELECT has_table('cr_report_line');
    SELECT has_table('cr_coa_to_account');

    -- Validate required view

    SELECT has_view('recon_payee');

    -- Validate required triggers

    SELECT has_trigger('cr_report','block_change_when_approved');

    -- Validate required functions

    SELECT has_function('reconciliation__get_cleared_balance');
    SELECT has_function('reconciliation__submit_set');
    SELECT has_function('reconciliation__check');
    SELECT has_function('reconciliation__reject_set');
    SELECT has_function('reconciliation__save_set');
    SELECT has_function('reconciliation__delete_my_report');
    SELECT has_function('reconciliation__delete_unapproved');
    SELECT has_function('cr_report_block_changing_approved');
    SELECT has_function('reconciliation__report_approve');
    SELECT has_function('reconciliation__new_report_id');
    SELECT has_function('reconciliation__add_entry');
    SELECT has_function('reconciliation__new_report_id');
    SELECT has_function('reconciliation__report_details');
    SELECT has_function('reconciliation__report_summary');
    SELECT has_function('reconciliation__search');
    SELECT has_function('reconciliation__get_current_balance');
    SELECT has_function('reconciliation__report_details_payee');

    -- Run tests

--    PREPARE test AS SELECT count(*)
--                      FROM defaults
--                      WHERE setting_key = 'check_prefix';
--    SELECT results_eq('test',ARRAY[1],'check_prefix set');

--    UPDATE defaults
--    SET value = 'Recon gl test '
--    WHERE setting_key = 'check_prefix';

    PREPARE test AS SELECT reconciliation__new_report_id(test_get_account_id('-11111'), 100, now()::date, false);
    SELECT results_eq('test',ARRAY[1],'Create Recon Report');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__delete_my_report(currval('cr_report_id_seq')::int);
    SELECT results_eq('test',ARRAY[true],'Delete Recon Report');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__new_report_id(test_get_account_id('-11111'), 100, now()::date, false);
    SELECT results_eq('test',ARRAY[2],'Create Recon Report');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__pending_transactions(currval('cr_report_id_seq')::int, 110) > 0;
    SELECT results_eq('test',ARRAY[true],'Pending Transactions Ran');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 10
                      FROM cr_report_line
                      WHERE report_id = currval('cr_report_id_seq')::int;
    SELECT results_eq('test',Array[true],'Correct number of transactions 1');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 3
                      FROM cr_report_line
                      WHERE scn LIKE '% gl %'
                      AND report_id = currval('cr_report_id_seq')::int;
    SELECT results_eq('test',ARRAY[true],'Correct number of GL groups');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 10
                      FROM cr_report_line
                      WHERE report_id = currval('cr_report_id_seq')::int;
    SELECT results_eq('test',ARRAY[true],'Correct number of report lines');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__submit_set(currval('cr_report_id_seq')::int, (select as_array(id::int) from cr_report_line where report_id = currval('cr_report_id_seq')::int));
    SELECT results_eq('test',ARRAY[true],'Report Submitted');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__submit_set(currval('cr_report_id_seq')::int, (select as_array(id::int) from cr_report_line where report_id = currval('cr_report_id_seq')::int));
    SELECT results_eq('test',ARRAY[true],'Report Submitted');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__report_approve(currval('cr_report_id_seq')::int) > 0;
    SELECT results_eq('test',ARRAY[true],'1 Report Approved');
    DEALLOCATE test;

    PREPARE test as SELECT count(*) = 2
                      FROM acc_trans
                      JOIN account a ON (acc_trans.chart_id = a.id)
                      WHERE a.accno = '-11111'
                      AND NOT cleared;
    SELECT results_eq('test',ARRAY[true],'1 Transactions closed');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__new_report_id(test_get_account_id('-11112'), 100, now()::date, false) > 0;
    SELECT results_eq('test',ARRAY[true],'1 Create Recon Report');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__pending_transactions(currval('cr_report_id_seq')::int, 110) > 0;
    SELECT results_eq('test',ARRAY[true],'1 Pending Transactions Ran');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 10
                      FROM cr_report_line
                      WHERE report_id = currval('cr_report_id_seq')::int;
    SELECT results_eq('test',ARRAY[true],'Correct number of transactions 2');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__pending_transactions(currval('cr_report_id_seq')::int, 110) > 0;
    SELECT results_eq('test',ARRAY[true],'1 Pending Transactions Ran');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 10
                      FROM cr_report_line
                      WHERE report_id = currval('cr_report_id_seq')::int;
    SELECT results_eq('test',ARRAY[true],'Correct number of transactions 3');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 3
                      FROM cr_report_line
                      WHERE scn like '% gl %'
                      AND report_id = currval('cr_report_id_seq')::int;
    SELECT results_eq('test',ARRAY[true],'1 Correct number of GL groups');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 10
                      FROM cr_report_line
                      WHERE report_id = currval('cr_report_id_seq')::int;
    SELECT results_eq('test',ARRAY[true],'1 Correct number of report lines');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__submit_set(currval('cr_report_id_seq')::int, '{}');
    SELECT results_eq('test',ARRAY[true],'1 Report Submitted');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__get_cleared_balance(test_get_account_id('-11112')) = -10;
    SELECT results_eq('test',ARRAY[true],'1 Cleared balance pre-approval is 10');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__report_approve(currval('cr_report_id_seq')::int) > 0;
    SELECT results_eq('test',ARRAY[true],'1 Report Approved');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 14
                      FROM acc_trans
                      JOIN account ON (acc_trans.chart_id = account.id)
                      WHERE accno = '-11112'
                      AND NOT cleared;
    SELECT results_eq('test',ARRAY[true],'1 Transactions open');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__get_cleared_balance(test_get_account_id('-11112')) = -10;
    SELECT results_eq('test',ARRAY[true],'1 Cleared balance post-approval is 10');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__new_report_id(test_get_account_id('-11112'), 100, now()::date, false)>0;
    SELECT results_eq('test',ARRAY[true],'1 Create Recon Report');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__pending_transactions(currval('cr_report_id_seq')::int, 110) > 0;
    SELECT results_eq('test',ARRAY[true],'1 Pending Transactions Ran');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 10
                      FROM cr_report_line
                      WHERE report_id = currval('cr_report_id_seq')::int;
    SELECT results_eq('test',ARRAY[true],'Correct number of transactions 4');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__submit_set(currval('cr_report_id_seq')::int, (select as_array(id::int)
                      FROM cr_report_line
                      WHERE report_id = currval('cr_report_id_seq')::int));
    SELECT results_eq('test',ARRAY[true],'Report Submitted');
    DEALLOCATE test;

    PREPARE test AS SELECT their_total = 110
                      FROM reconciliation__report_summary(currval('cr_report_id_seq')::int);
    SELECT results_eq('test',ARRAY[true],'Their Balance Updated');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__get_cleared_balance(test_get_account_id('-11112'))= -10;
    SELECT results_eq('test',ARRAY[true],'Cleared balance pre-approval is 10');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__report_approve(currval('cr_report_id_seq')::int) > 0;
    SELECT results_eq('test',ARRAY[true],'Report Approved');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__delete_my_report(currval('cr_report_id_seq')::int) IS NULL;
    -- Should we thrown an exception?
    SELECT results_eq('test',ARRAY[true],'Cannot Delete Approved Recon Report');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 2
                      FROM acc_trans
                      JOIN account a ON (acc_trans.chart_id = a.id)
                      WHERE accno = '-11112'
                      AND NOT cleared;
    SELECT results_eq('test',ARRAY[true],'Transactions closed');
    DEALLOCATE test;

    PREPARE test AS SELECT reconciliation__get_cleared_balance(test_get_account_id('-11112'))= -130;
    SELECT results_eq('test',ARRAY[true],'Cleared balance post-approval is 130');
    DEALLOCATE test;

    -- Finish the tests and clean up.
    SELECT * FROM finish();
ROLLBACK;
